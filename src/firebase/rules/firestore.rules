rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAdmin() {
      return request.auth.token.role is string && request.auth.token.role == 'admin'
    }

    // Base data, it shouldn't be modified by anyone except admin
    match /competitions/1BWoxRomTm3aaJFqRVHV {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    match /stadiums/{stadiumId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // User data is hidden except for the current users and admins
    match /users/{userId} {
      function isCurrentUserOrAdmin() {
        return isAuthenticated() && (request.auth.uid == userId || isAdmin());
      }
      allow read: if userId == " " || isCurrentUserOrAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId
      allow update: if isCurrentUserOrAdmin() && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['admin']);
      allow delete: if false;
    }
    // Opponents can be accessed by authenticated users.
    // It should contain only data useful for display in rankings to avoid leak of potentially sensitive information)
    match /opponents/{userId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Bets can only be read by creator and can only be modified if userId is correctly filled
    match /bets/{betId} {
      allow read: if
        isAuthenticated() &&
        (!exists(/databases/$(database)/documents/bets/$(betId)) || request.auth.uid == resource.data.uid);
      allow write: if
        isAuthenticated() &&
        request.auth.uid == request.resource.data.uid &&
        request.resource.data.betTeamA is number && request.resource.data.betTeamA >= 0 &&
        request.resource.data.betTeamB is number && request.resource.data.betTeamB >= 0 &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.version is number &&
        request.time <= get(/databases/$(database)/documents/matches/$(request.resource.data.matchId)).data.dateTime;
    }

    // Groups cannot be modified except by functions
    // Creation is still allowed given some restrictions on data
    match /groups/{groupsId} {
      allow read: if isAuthenticated();
      allow update: if false;
      allow create: if
        isAuthenticated() &&
        request.resource.data.name is string && request.resource.data.name.size() >= 5 &&
        request.resource.data.joinKey is string && request.resource.data.joinKey.size() == 5 &&
        request.resource.data.price is number && (request.resource.data.price == 0 || 
        (request.resource.data.price > 0 && request.resource.data.percent is number && 
        request.resource.data.percent >= 20 && request.resource.data.percent <= 80)) &&
        request.resource.data.createdBy == request.auth.uid &&
        request.resource.data.createdAt == request.time;
      allow delete: if false;
    }

    match /groupApply/{applyId} {
      allow read: if request.auth.uid == resource.data.uid;
      allow create: if
        request.auth.uid == request.resource.data.uid &&
        request.resource.data.groupId is string &&
        exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId))
      allow update: if false;
      allow delete: if false;
    }

     match /notificationSubscriptions/{notificationSubscriptionId} {
        allow read: if request.auth.uid == resource.data.uid;
        allow create: if request.auth.uid == request.resource.data.uid && request.resource.data.token == notificationSubscriptionId;
        allow update: if request.auth.uid == resource.data.uid && request.auth.uid == request.resource.data.uid && request.resource.data.token == notificationSubscriptionId;
        allow delete: if request.auth.uid == resource.data.uid;
     }
  }
}
